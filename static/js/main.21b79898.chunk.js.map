{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colorsArray","useFetch","url","useState","quotesArray","setQuotesArray","a","fetch","response","json","parsedJSON","quotes","useEffect","fetchQuotes","App","quote","author","setQuote","color","setColor","changeQuote","getRandomItem","array","Math","floor","length","random","className","style","backgroundColor","id","icon","faQuoteLeft","href","encodeURI","target","rel","faTwitter","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSASIA,EAAc,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAEnFC,EAAW,SAAAC,GACf,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KADsB,4CAGtB,8BAAAC,EAAA,sEACyBC,MAAML,GAD/B,cACQM,EADR,gBAE2BA,EAASC,OAFpC,OAEQC,EAFR,OAGEL,EAAeK,EAAWC,QAH5B,4CAHsB,sBAUtB,OADAC,qBAAU,YATY,mCASJC,KAAiB,CAACX,IAC7BE,GA0CMU,MAvCf,WACE,IAAMV,EAAcH,EAlBJ,0IAmBhB,EAA0BE,mBAAS,CAAEY,MAAO,GAAIC,OAAQ,KAAxD,mBAAOD,EAAP,KAAcE,EAAd,KACA,EAA0Bd,mBAAS,UAAnC,mBAAOe,EAAP,KAAcC,EAAd,KAEAP,qBAAU,WACJR,GACFgB,MAED,CAAChB,IAEJ,IAAMiB,EAAgB,SAACC,GAErB,OAAOA,EADaC,KAAKC,MAAMF,EAAMG,OAASF,KAAKG,YAI/CN,EAAc,WAClBH,EAASI,EAAcjB,IACvBe,EAASE,EAAcrB,KAGzB,OACE,qBAAK2B,UAAU,MAAf,SACE,wBAAQA,UAAU,wBAAwBC,MAAO,CAAEC,gBAAgB,IAAD,OAAMX,IAAxE,SACE,sBAAKY,GAAG,YAAYH,UAAU,aAAaC,MAAO,CAAEV,MAAM,IAAD,OAAMA,IAA/D,UACE,oBAAGY,GAAG,OAAN,UAAa,cAAC,IAAD,CAAiBC,KAAMC,MAApC,IAAqDjB,EAAMA,SAC3D,oBAAGe,GAAG,SAAN,oBAAkBf,EAAMC,UACxB,sBAAKc,GAAG,UAAR,UACE,mBAAGA,GAAG,cAAcH,UAAU,aAAaC,MAAO,CAAEC,gBAAgB,IAAD,OAAMX,IAAWe,KAAMC,UAAU,6CAAD,OAA8CnB,EAAMA,MAApD,cAA+DA,EAAMC,SAAWmB,OAAO,SAASC,IAAI,aAAvM,SACE,cAAC,IAAD,CAAiBL,KAAMM,QAEzB,wBAAQP,GAAG,YAAYH,UAAU,aAAaC,MAAO,CAAEC,gBAAgB,IAAD,OAAMX,IAAWoB,QAAS,kBAAMlB,KAAtG,kCC3CGmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.21b79898.chunk.js","sourcesContent":["import './App.scss';\nimport { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\n\n\nlet quotesDBUrl = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n\nlet colorsArray = [\"c77dff\", \"ffd166\", \"f48498\", \"99d98c\", \"ffa033\", \"62bfed\", \"3590f3\", \"ff686b\"];\n\nconst useFetch = url => {\n  const [quotesArray, setQuotesArray] = useState(null);\n\n  async function fetchQuotes() {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArray(parsedJSON.quotes);\n  }\n\n  useEffect(() => { fetchQuotes() }, [url]);\n  return quotesArray;\n};\n\nfunction App() {\n  const quotesArray = useFetch(quotesDBUrl);\n  const [quote, setQuote] = useState({ quote: \"\", author: \"\" });\n  const [color, setColor] = useState('000000');\n\n  useEffect(() => {\n    if (quotesArray) {\n      changeQuote()\n    }\n  }, [quotesArray])\n\n  const getRandomItem = (array) => {\n    let randomInteger = Math.floor(array.length * Math.random());\n    return array[randomInteger];\n  }\n\n  const changeQuote = () => {\n    setQuote(getRandomItem(quotesArray));\n    setColor(getRandomItem(colorsArray));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header transition\" style={{ backgroundColor: `#${color}` }}>\n        <div id=\"quote-box\" className=\"transition\" style={{ color: `#${color}` }}>\n          <p id=\"text\"><FontAwesomeIcon icon={faQuoteLeft} /> {quote.quote}</p>\n          <p id=\"author\">â€” {quote.author}</p>\n          <div id=\"buttons\">\n            <a id=\"tweet-quote\" className=\"transition\" style={{ backgroundColor: `#${color}` }} href={encodeURI(`http://www.twitter.com/intent/tweet?text=\"${quote.quote}\" -${quote.author}`)} target=\"_blank\" rel=\"noreferrer\" >\n              <FontAwesomeIcon icon={faTwitter} />\n            </a>\n            <button id=\"new-quote\" className=\"transition\" style={{ backgroundColor: `#${color}` }} onClick={() => changeQuote()}>New Quote</button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}